import sys
import networkx as nx
import csv
from datetime import timedelta

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ
sys.stdout.reconfigure(encoding='utf-8')

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå graph.graphml
G = nx.read_graphml('graph/graph_updated.graphml')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ node ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def validate_nodes(G, start, end):
    if start not in G or end not in G:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")
        sys.exit(1)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ NetworkX
def find_multiple_paths(G, start, end, max_paths=5, avoid_nodes=None, must_pass_nodes=None, walk_threshold=2, max_skipped=10):
    if avoid_nodes is None:
        avoid_nodes = set()
    if must_pass_nodes is None:
        must_pass_nodes = set()
    
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å {start} ‡πÑ‡∏õ {end} (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á: {avoid_nodes}, ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô: {must_pass_nodes}) ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_paths} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á...")

    all_paths = []
    skipped_paths = 0  # ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°

    try:
        # ‡πÉ‡∏ä‡πâ NetworkX ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        paths_generator = nx.shortest_simple_paths(G, source=start, target=end, weight='weight')
        
        for path in paths_generator:
            if len(all_paths) >= max_paths:
                break
            if must_pass_nodes.issubset(set(path)):
                cost = sum(G[path[i]][path[i+1]]['weight'] for i in range(len(path)-1))
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà WALK ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
                walk_count = sum(1 for i in range(len(path)-1) if G[path[i]][path[i+1]].get('route_id') == "WALK")

                if walk_count > walk_threshold:
                    skipped_paths += 1
                    print(f"üö´ ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ (WALK = {walk_count} ‡πÄ‡∏Å‡∏¥‡∏ô {walk_threshold}) (‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß {skipped_paths} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)")

                    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    if skipped_paths >= max_skipped:
                        print("‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                        break
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ WALK ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                
                all_paths.append((path, cost))
                print(f"üîπ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {path} | ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: {cost} | WALK: {walk_count}")

    except nx.NetworkXNoPath:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ")

    print(f"‚ú® ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á WALK: {len(all_paths)} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
    return all_paths

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
def save_paths_to_csv(G, all_paths, filename='csv/path_details2.csv'):
    with open(filename, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(['Path Number', 'Route ID', 'Start Stop', 'End Stop', 'Travel Time (seconds)'])

        for path_index, (path_taken, total_cost) in enumerate(all_paths, start=1):
            print(f"üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà {path_index} ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV...")
            for i in range(len(path_taken) - 1):
                edge_data = G[path_taken[i]][path_taken[i + 1]]
                route_id = edge_data.get('route_id', 'N/A')
                travel_time = edge_data.get('weight', 0)
                print(f"  ‚ñ∂Ô∏è {path_taken[i]}\t‚Üí\t{path_taken[i + 1]}\t\t| Route ID: {route_id}\t\t| ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: {travel_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                writer.writerow([path_index, route_id, path_taken[i], path_taken[i + 1], str(timedelta(seconds=travel_time))])
            print(f"‚úÖ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà {path_index} ‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {filename}")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
start_station = "2794"
end_station = "2797"
avoid_nodes = set()  # node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á
must_pass_nodes = set()  # node ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô
max_paths_to_show = 20
walk_threshold = 4  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î WALK ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
max_skipped_paths = 1000  # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏ô‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
validate_nodes(G, start_station, end_station)

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
paths = find_multiple_paths(
    G, start_station, end_station, 
    max_paths=max_paths_to_show, 
    avoid_nodes=avoid_nodes, 
    must_pass_nodes=must_pass_nodes,
    walk_threshold=walk_threshold,
    max_skipped=max_skipped_paths
)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á CSV ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
if paths:
    save_paths_to_csv(G, paths)
else:
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ")

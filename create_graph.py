import sys
import pandas as pd
import networkx as nx
from datetime import timedelta
from geopy.distance import geodesic  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î
from tqdm import tqdm  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á progress bar

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ
sys.stdout.reconfigure(encoding='utf-8')

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå GTFS
print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GTFS...")
trips = pd.read_csv('namtang.gtfs/trips.txt')
stop_times = pd.read_csv('namtang.gtfs/stop_times.txt')
stops = pd.read_csv('namtang.gtfs/stops.txt')
print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

# ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô datetime
stop_times['arrival_time'] = pd.to_datetime(stop_times['arrival_time'], format='%H:%M:%S')
stop_times['departure_time'] = pd.to_datetime(stop_times['departure_time'], format='%H:%M:%S')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏•‡πà‡∏≤ (Directed Graph)
G = nx.DiGraph()

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• trips.txt ‡∏Å‡∏±‡∏ö stop_times.txt ‡∏ï‡∏≤‡∏° trip_id
merged_data = pd.merge(stop_times, trips, on='trip_id')

# ‡πÄ‡∏û‡∏¥‡πà‡∏° edges ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
print("üöå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏•‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü...")
for trip_id, trip_data in tqdm(merged_data.groupby('trip_id'), desc="Adding bus routes", dynamic_ncols=True, leave=False):
    for i in range(len(trip_data) - 1):
        stop_1, stop_2 = trip_data.iloc[i], trip_data.iloc[i + 1]
        stop_1_id, stop_2_id = str(stop_1['stop_id']), str(stop_2['stop_id'])
        route_id = stop_1['route_id']

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
        travel_time = (stop_2['arrival_time'] - stop_1['departure_time']).seconds

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° edge ‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
        G.add_edge(stop_1_id, stop_2_id, weight=travel_time, route_id=route_id)

print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ñ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

# ‡πÄ‡∏û‡∏¥‡πà‡∏° edges ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡πâ‡∏≤
WALKING_SPEED = 1.39  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡πÄ‡∏°‡∏ï‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
WALKING_DISTANCE_THRESHOLD = 400  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏±‡∏ô (‡πÄ‡∏°‡∏ï‡∏£)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡πâ‡∏≤‡∏¢
stop_locations = {str(row['stop_id']): (row['stop_lat'], row['stop_lon']) for _, row in stops.iterrows()}

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô
stop_ids = list(stop_locations.keys())

print("üö∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô...")
for i in tqdm(range(len(stop_ids)), desc="Adding walking paths", dynamic_ncols=True, leave=False):
    for j in range(i + 1, len(stop_ids)):
        stop_1_id, stop_2_id = stop_ids[i], stop_ids[j]
        coord_1, coord_2 = stop_locations[stop_1_id], stop_locations[stop_2_id]

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡πÄ‡∏°‡∏ï‡∏£)
        distance = geodesic(coord_1, coord_2).meters

        if distance <= WALKING_DISTANCE_THRESHOLD:
            walking_time = distance / WALKING_SPEED
            G.add_edge(stop_1_id, stop_2_id, weight=int(walking_time), route_id="WALK")
            G.add_edge(stop_2_id, stop_1_id, weight=int(walking_time), route_id="WALK")  # ‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ

print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")


# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö GPickle
print("üíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏£‡∏≤‡∏ü...")

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå GraphML
nx.write_graphml(G, 'graph/graph.graphml')

print("‚úÖ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå graph/graph.graphml")

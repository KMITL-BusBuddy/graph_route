import sys
import networkx as nx
from flask import Flask, request, jsonify

sys.stdout.reconfigure(encoding='utf-8')

G = nx.read_graphml('graph/graph_updated.graphml')

app = Flask(__name__)

def validate_nodes(G, start, end):
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á...")
    if start not in G or end not in G:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")
        return False, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü"
    print("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return True, None

def find_multiple_paths(G, start, end, max_paths=5, avoid_nodes=None, walk_threshold=2, max_skipped=10):
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å {start} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {end}...")
    if avoid_nodes is None:
        avoid_nodes = set()

    all_paths = []
    skipped_paths = 0

    try:
        paths_generator = nx.shortest_simple_paths(G, source=start, target=end, weight='weight')
        for path in paths_generator:
            print(f"üìú ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {path}")
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ node ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô avoid_nodes
            if any(node in avoid_nodes for node in path):
                print(f"‚ùå ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ node ‡πÉ‡∏ô avoid_nodes: {avoid_nodes}")
                continue

            if len(all_paths) >= max_paths:
                print(f"üî¥ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö {max_paths} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
                break
            
            walk_count = sum(1 for i in range(len(path)-1) if G[path[i]][path[i+1]].get('route_id') == "WALK")
            if walk_count > walk_threshold:
                skipped_paths += 1
                if skipped_paths >= max_skipped:
                    print(f"‚ùå ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô {max_skipped} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    break
                print(f"üö∂‚Äç‚ôÄÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô {walk_threshold} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                continue
            
            cost = 0
            total_travel_time = 0
            num_route_changes = -1
            path_details = []
            current_group = None
            line_counter = 1

            for i in range(len(path) - 1):
                edge_data = G[path[i]][path[i + 1]]
                route_id = str(edge_data.get('route_id', 'N/A'))
                travel_time = edge_data.get('weight', 0)

                # Adjust travel time if the route is a "WALK"
                if route_id == "WALK":
                    print(f"üö∂‚Äç‚ôÄÔ∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏° {travel_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                    travel_time = travel_time / 2  # Dividing the travel time by 2 for walking routes
                    print(f"üö∂‚Äç‚ôÄÔ∏è ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô: ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {travel_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

                cost += travel_time
                total_travel_time += travel_time

                if current_group is None or current_group["route_id"] != route_id:
                    num_route_changes += 1
                    current_group = {
                        "route_id": route_id,
                        "lines": {}
                    }
                    path_details.append(current_group)
                    line_counter = 1

                current_group["lines"][f"line{line_counter}"] = {
                    "start": path[i],
                    "end": path[i + 1],
                    "travel_time_seconds": travel_time
                }
                line_counter += 1

            all_paths.append({
                "path": path,
                "cost": cost,
                "walk_count": walk_count,
                "path_details": path_details,
                "total_travel_time_seconds": total_travel_time,
                "num_route_changes": num_route_changes
            })
    
    except nx.NetworkXNoPath:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
        return []
    
    print(f"‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_paths)} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
    return sorted(all_paths, key=lambda x: (x["num_route_changes"], x["cost"]))

def find_paths_with_must_pass(G, start, end, must_pass_nodes, max_paths=5, avoid_nodes=None, walk_threshold=2, max_skipped=10):
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å {start} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {end} ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô {must_pass_nodes}...")
    if avoid_nodes is None:
        avoid_nodes = set()
    
    must_pass_nodes = list(must_pass_nodes) if must_pass_nodes else []
    
    if not must_pass_nodes:
        return find_multiple_paths(G, start, end, max_paths, avoid_nodes, walk_threshold, max_skipped)
    
    all_segments = []
    current_start = start
    
    for must_pass in must_pass_nodes:
        print(f"üîÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô {must_pass}...")
        segment_paths = find_multiple_paths(G, current_start, must_pass, max_paths, avoid_nodes, walk_threshold, max_skipped)
        if not segment_paths:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô {must_pass}")
            return []
        all_segments.append(segment_paths)
        current_start = must_pass
    
    final_segment = find_multiple_paths(G, current_start, end, max_paths, avoid_nodes, walk_threshold, max_skipped)
    if not final_segment:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢")
        return []
    all_segments.append(final_segment)
    
    combined_paths = []
    def combine_segments(segments, path_so_far=[], cost_so_far=0, walk_count_so_far=0, path_details_so_far=[], num_route_changes_so_far=0):
        if not segments:
            combined_paths.append({
                "path": path_so_far,
                "cost": cost_so_far,
                "walk_count": walk_count_so_far,
                "path_details": path_details_so_far,
                "total_travel_time_seconds": cost_so_far,
                "num_route_changes": num_route_changes_so_far
            })
            return
        
        for segment in segments[0]:
            new_path = path_so_far[:-1] + segment["path"] if path_so_far else segment["path"]
            new_cost = cost_so_far + segment["cost"]
            new_walk_count = walk_count_so_far + segment["walk_count"]
            new_path_details = path_details_so_far + segment["path_details"]
            new_num_route_changes = num_route_changes_so_far + segment["num_route_changes"]
            combine_segments(segments[1:], new_path, new_cost, new_walk_count, new_path_details, new_num_route_changes)
    
    combine_segments(all_segments)
    
    print(f"‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô {len(combined_paths)} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
    return sorted(combined_paths, key=lambda x: (x["num_route_changes"], x["cost"]))


@app.route('/find_paths', methods=['POST'])
def find_paths():
    data = request.get_json()

    start_station = str(data.get("start_station"))
    end_station = str(data.get("end_station"))
    avoid_nodes = set(map(str, data.get("avoid_nodes", [])))
    must_pass_nodes = set(map(str, data.get("must_pass_nodes", [])))
    max_paths_to_show = data.get("max_paths", 20)
    walk_threshold = data.get("walk_threshold", 2)
    max_skipped_paths = data.get("max_skipped_paths", 10)

    print("üîç ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...")
    is_valid, error_message = validate_nodes(G, start_station, end_station)
    if not is_valid:
        print(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: {error_message}")
        return jsonify({"error": error_message}), 400

    paths = find_paths_with_must_pass(
        G, start_station, end_station, must_pass_nodes,
        max_paths=max_paths_to_show,
        avoid_nodes=avoid_nodes,
        walk_threshold=walk_threshold,
        max_skipped=max_skipped_paths
    )

    if not paths:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ")
        return jsonify({"message": "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ"}), 404

    print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(paths)} ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
    return jsonify({"paths": paths}), 200

@app.route('/health', methods=['GET'])
def health_check():
    print("ü©∫ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö...")
    return jsonify({"status": "OK"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
